@*<script src="https://cdn.jsdelivr.net/npm/tronweb/dist/tronweb.min.js"></script>*@
<script src="https://unpkg.com/@@walletconnect/web3-provider@1.7.1/dist/umd/index.min.js"></script>

<div id="bg">
</div>
<div>
    <div class="div-field">
        <button onclick="connectWithTronLinkandGetBalance()" class="btn" id="getMessage">Connect with TronLink</button>
    </div>
    <div class="div-field">
        <button onclick="connectWalletButton()" class="btn" id="getMessageWalletConnect">Connect with Tron Mobile</button>
    </div>
    <div class="div-field">
        <p id="status"></p>
    </div>
</div>
<div style="display:none;" id="checkdivWalletConnect">
    <div style="display:none;">
        <input type="text" id="account" hidden />
        <input type="text" id="chainIds" hidden />
    </div>
    <div class="div-field">
        <label>USDT Balance</label>
        <p id="balance"></p>
    </div>
    <div class="div-field">
        <input type="text" placeholder="Reciever" id="reciever" required />
    </div>
    <div class="div-field">
        <input type="number" placeholder="Amount" id="amountsent" required />
    </div>
    <div class="div-field">
        <button onclick="transferWalletConnect()" class="btn">Transfer</button>
    </div>

    <div class="div-field">
        <button onclick="DisconnectWalletConnect()" class="btn">Disconnect from Tron Mobile</button>
    </div>
    <div class="div-field">
        <p id="status"></p>
    </div>
</div>
<div style="display:none;" id="checkdiv">
    <div class="div-field">
        <label>TRC20-USDT Balance</label>
        <p id="balance"></p>
    </div>
    <div class="div-field">
        <input type="text" placeholder="Reciever" id="reciever" required />
    </div>
    <div class="div-field">
        <input type="number" placeholder="Amount" id="amountsent" required />
    </div>
    <div class="div-field">
        <button onclick="connectWithTronLink()" class="btn">Transfer</button>
    </div>
    @*    <div class="div-field">
    <input type="text" placeholder="Transaction Hash" id="TxHash" required />
    </div>
    <div class="div-field">
    <button onclick="" class="btn">Check Transaction</button>
    </div>*@
    <div class="div-field">
        <p id="status"></p>
    </div>

</div>

<script src="https://cdn.tronlink.org/tronweb.js"></script>

<script>
    const usdtTrc20 = "TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t";

    function connectWalletButton() {
        return new Promise((resolve, reject) => {
            var provider = new window.WalletConnectProvider.default({
                rpc: {
                    1: "https://api.trongrid.io",
                },
            });

            provider.enable().then(function (accounts) {
                // WalletConnect connection established
                console.log("Wallet connected");
                console.log("Connected accounts:", accounts);
                console.log(provider.chainId);
                console.log(provider.rpcUrl);

                window.web3 = new Web3(provider);
                // Get the balance of Ether (ETH) for the first connected account
                window.web3.eth.getBalance(accounts[0]).then(function (ethBalance) {
                    console.log("ETH Balance:", window.web3.utils.fromWei(ethBalance, "ether"));
                    // You can perform further actions with the ETH balance
                }).catch(function (error) {
                    console.error("Failed to retrieve ETH balance:", error);
                });

                // Create a contract instance for the USDT token on Tron network
                const contractAddress = "TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t";
                const tokenInstance = new window.tronWeb.contract().at(contractAddress);
                tokenInstance.decimals().call().then(function (decimals) {
                    tokenInstance.balanceOf(accounts[0]).call().then(function (balance) {
                        const usdtBalance = balance / Math.pow(10, decimals);
                        console.log("USDT Balance:", usdtBalance);
                        // You can perform further actions with the USDT balance
                        document.getElementById("getMessage").style.visibility = "hidden";
                        document.getElementById("getMessageWalletConnect").style.visibility = "hidden";
                        document.getElementById("checkdivWalletConnect").style.display = "block";
                        document.getElementById("balance").innerText = `${usdtBalance}`;
                    }).catch(function (error) {
                        console.error("Failed to retrieve USDT balance:", error);
                    });
                }).catch(function (error) {
                    console.error("Failed to retrieve decimals:", error);
                });

            });
        });
    }
    const DisconnectWalletConnect = async () => {
        var provider = new window.WalletConnectProvider.default({
            rpc: {
                56: "https://bsc-dataseed.binance.org/"
            },
        });

        //if (provider && provider.connected) {
        await provider.disconnect().then(function () {
            // WalletConnect session disconnected successfully
            console.log("Wallet disconnected");
            // You can perform further actions after disconnecting from the wallet
        }).catch(function (error) {
            // Error occurred while disconnecting from WalletConnect session
            console.error("Failed to disconnect wallet:", error);
        });
        //} else {
        //    console.log("No open wallet connection");
        //}

        return new Promise((resolve, reject) => {
            var provider = new window.WalletConnectProvider.default({
                rpc: {
                    56: "https://bsc-dataseed.binance.org/",
                    137: "https://polygon-mainnet.infura.io/",
                    1: "https://mainnet.infura.io/v3/",
                },
            });

            provider.enable().then(function (accounts) {
                // WalletConnect connection established

                window.web3 = new Web3(provider);

                // Create a contract instance for the USDT token
                var usdtContract = new window.web3.eth.Contract(transferABI, TokenAdd);

                // Perform the USDT token transfer
                var recipientAddress = recipientAdd; // Replace with the recipient's address
                var amount = amountSent; // Replace with the amount of USDT to transfer (in smallest unit, e.g., Wei)
            });

            // Disconnect from WalletConnect session
            //provider.disconnect();
            window.location.reload();
        });
        window.location.reload();
    }
    const transferWalletConnect = async () => {
        try {
            const account = document.getElementById('account').value;
            const receiverAddress = document.getElementById('reciever').value;
            const amount = document.getElementById('amountsent').value;
            const chainId = document.getElementById('chainIds').value;
            const balanceToken = document.getElementById('balance').value;

            if (chainId == 137) {
                // Polygon 137
                // Ethereum Mainnet 1
                // BSC 56
                let amountinWei = new BigNumber(amount * 1000000);
                let amountinBig = amountinWei.toString();
                if (balanceToken > amountinWei) {
                    //alert(TokenBalance);
                    const check = await TransferTokensUSDTsWalletConnect(USDTPolygon, account, receiverAddress, amountinBig);
                    //alert(check);
                    alert("Amount Transferred Successfully: ", check);
                }
                else {
                    alert('Amount is greater than Balance');
                }
            } else if (chainId == 1) {
                // Polygon 0x89
                // Ethereum Mainnet 0x1
                // BSC 0x38
                let amountinWei = new BigNumber(amount * 1000000);
                let amountinBig = amountinWei.toString();
                if (balanceToken > amountinWei) {
                    //alert(TokenBalance);
                    const check = await TransferTokensUSDTsWalletConnect(USDTETH, account, receiverAddress, amountinBig);
                    //alert(check);
                    alert("Amount Transferred Successfully: ", check);
                }
                else {
                    alert('Amount is greater than Balance');
                }
            } else if (chainId == 56) {
                // Polygon 0x89
                // Ethereum Mainnet 0x1
                // BSC 0x38
                let amountinWei = new BigNumber(amount * 1000000);
                let amountinBig = amountinWei.toString();
                if (balanceToken > amountinWei) {
                    //alert(TokenBalance);
                    const check = await TransferTokensUSDTsWalletConnect(USDTBNB, account, receiverAddress, amountinBig);
                    //alert(check);
                    alert("Amount Transferred Successfully: ", check);
                }
                else {
                    alert('Amount is greater than Balance');
                }
            }
        } catch (error) {
            console.error(error);
            alert(error);
            alert('Transfer failed. Please try again later.');
        }
    };
    const TransferTokensUSDTsWalletConnect = async (TokenAdd, fromAdd, recipientAdd, amountSent) => {
        return new Promise((resolve, reject) => {
            var provider = new window.WalletConnectProvider.default({
                rpc: {
                    56: "https://bsc-dataseed.binance.org/",
                    137: "https://polygon-mainnet.infura.io/",
                    1: "https://mainnet.infura.io/v3/",
                },
            });

            provider.enable().then(function (accounts) {
                // WalletConnect connection established

                window.web3 = new Web3(provider);

                // Create a contract instance for the USDT token
                var usdtContract = new window.web3.eth.Contract(transferABI, TokenAdd);

                // Perform the USDT token transfer
                var recipientAddress = recipientAdd; // Replace with the recipient's address
                var amount = amountSent; // Replace with the amount of USDT to transfer (in smallest unit, e.g., Wei)
                var txHash = "";
                usdtContract.methods.transfer(recipientAddress, amount).send({ from: accounts[0] })
                    .then(function (transactionHash) {
                        console.log("USDT Transfer successful. Transaction hash:", transactionHash);
                        txHash = transactionHash;
                        // You can perform further actions after the transfer is successful
                        alert("Transaction Confirmed ", txHash);
                    })
                    .catch(function (error) {
                        console.error("Failed to transfer USDT:", error);
                    });

            });

            // Disconnect from WalletConnect session
            //provider.disconnect();

        });
    }
    async function connectWithTronLink() {

        const senderAddress = window.tronWeb.defaultAddress.base58; // sender's address
        const receiverAddress = document.getElementById('reciever').value; // receiver's address
        const amount = document.getElementById('amountsent').value; // amount to transfer in USDT

        if (window.tronWeb && window.tronWeb.defaultAddress.base58) {
            // TronLink is installed and the user is logged in
            const state = window.tronWeb.isConnected();
            if (state) {
                console.log("Connected to Tron Wallet");
            } else {
                console.log("Not connected to Tron Wallet");
            }
            const address = window.tronWeb.defaultAddress.base58;

            // Get the contract instance
            const contract = await window.tronWeb.contract().at(usdtTrc20);

            // Convert the amount to the token's smallest unit (e.g., 1 USDT = 1000000 sun)
            const tokenAmount = amount * 1000000;

            try {
                // Send the token transfer transaction
                let result = await contract.transfer(receiverAddress, tokenAmount).send({
                    shouldPollResponse: true,
                    feeLimit: 100000000,
                    callValue: 0,
                    tokenId: 0,
                    from: senderAddress,
                });

                console.log(result);
                alert("USDT transfer successful! with txHash ", result);
            } catch (error) {
                console.error(error);
                alert("USDT transfer failed.");
            }
        }
        else if (window.tronWeb && window.tronWeb.ready) {
            // TronLink is installed and enabled
            const tronWeb = window.tronWeb;
            // Use tronWeb to interact with the Tron blockchain
        }
        else {
            // TronLink is not installed or the user is not logged in
            alert("Please install and log in to TronLink to connect.");
        }
    }
    async function connectWithTronLinkandGetBalance() {
        const receiverAddress = document.getElementById('reciever').value;
        const amount = document.getElementById('amountsent').value;
        if (window.tronWeb && window.tronWeb.defaultAddress.base58) {
            //TronLink is installed and the user is logged in
            const state = window.tronWeb.isConnected();
            if (state) {
                console.log('Connected to Tron Wallet');
            } else {
                console.log('Not connected to Tron Wallet');
            }
            const address = window.tronWeb.defaultAddress.base58;

            const contractAddress = "TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t";
            const tokenInstance = await window.tronWeb.contract().at(contractAddress);
            const decimals = await tokenInstance.decimals().call();
            const balance = await tokenInstance.balanceOf(address).call();
            const usdtBalance = balance / Math.pow(10, decimals);
            console.log("USDT-TRC20 Balance: ", usdtBalance);
            //alert(usdtBalance)
            document.getElementById("getMessage").style.visibility = "hidden";
            document.getElementById("getMessageWalletConnect").style.visibility = "hidden";
            document.getElementById("checkdiv").style.display = "block";
            document.getElementById("balance").innerText = `${usdtBalance}`;

        } else {
            // TronLink is not installed or the user is not logged in
            alert('Please install and log in to TronLink to connect.');
        }
    }
    async function connectWithTronLinkandGetBalanceTRX() {
        const receiverAddress = document.getElementById('reciever').value;
        const amount = document.getElementById('amountsent').value;
        if (window.tronWeb && window.tronWeb.defaultAddress.base58) {
            //TronLink is installed and the user is logged in
            const state = window.tronWeb.isConnected();
            if (state) {
                console.log('Connected to Tron Wallet');
            } else {
                console.log('Not connected to Tron Wallet');
            }
            const address = window.tronWeb.defaultAddress.base58;

            await window.tronWeb.trx.getBalance(address, function (error, balance) {
                if (error)
                    console.error(error);
                else {
                    //console.log(balance);
                    var balanceInNumber = balance / 1000000;
                    document.getElementById("getMessage").style.visibility = "hidden";
                    //document.getElementById("checkdiv").style.visibility = "visible";
                    document.getElementById("checkdiv").style.display = "block";
                    document.getElementById("balance").innerText = `${balanceInNumber}`;
                }
            });
        } else {
            // TronLink is not installed or the user is not logged in
            alert('Please install and log in to TronLink to connect.');
        }
    }
    async function TransferTRX() {
        const receiverAddress = document.getElementById('reciever').value;
        const amount = document.getElementById('amountsent').value;
        if (window.tronWeb && window.tronWeb.defaultAddress.base58) {
            //TronLink is installed and the user is logged in
            const state = window.tronWeb.isConnected();
            if (state) {
                console.log('Connected to Tron Wallet');
            } else {
                console.log('Not connected to Tron Wallet');
            }
            const address = window.tronWeb.defaultAddress.base58;
            //alert(`Successfully connected with TronLink. Address: ${address}`);
            var testamount = amount * 1000000;
            console.log(receiverAddress, amount, usdtTrc20, address);
            let tx = await window.tronWeb.transactionBuilder.sendTrx(receiverAddress, testamount, address);
            var signedTx = await window.tronWeb.trx.sign(tx);
            var brostTx = await window.tronWeb.trx.sendRawTransaction(signedTx);
            alert("Amount Transfer Successfully");
        } else {
            // TronLink is not installed or the user is not logged in
            alert('Please install and log in to TronLink to connect.');
        }
    }
</script>