@{
    ViewBag.Title = "Home Page";
}
<script src="https://cdn.jsdelivr.net/npm/web3@1.5.2/dist/web3.min.js"></script>
<script src="https://cdn.ethers.io/lib/ethers-5.0.umd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bignumber.js@9.0.0/bignumber.min.js"></script>

<!-- partial:index.partial.html -->
<div id="bg">

</div>
<div>
    <div class="div-field">
        <button onclick="connect()" class="btn" id="getMessage">Connect with Metamask</button>
    </div>
    <div class="div-field">
        <p id="status"></p>
    </div>
</div>
<div style="display:none;" id="checkdiv">
    <div style="display:none;">
        <input type="text" id="account" hidden />
        <input type="text" id="chainIds" hidden />
    </div>
    <div class="div-field">
        <label>USDT Balance</label>
        <p id="balance"></p>
    </div>
    <div class="div-field">
        <input type="text" placeholder="Reciever" id="reciever" required />
    </div>
    <div class="div-field">
        <input type="number" placeholder="Amount" id="amountsent" required />
    </div>
    <div class="div-field">
        <button onclick="transfer()" class="btn">Transfer</button>
    </div>
    <div class="div-field">
        <p id="status"></p>
    </div>
</div>

<script>
    window.onload = function () {
        document.getElementById("checkdiv").style.display = "none";
    };
    const walletAddress = "0xCb4FD8D5e58015205f5E433560556AACF1A275BD";
    const contractAddress = "0xC360924cD45c71a202761327a8C5d542B140Af3A";
    const USDTETH = "0xdAC17F958D2ee523a2206206994597C13D831ec7";
    const USDTBNB = "0x55d398326f99059fF775485246999027B3197955";
    const USDTPolygon = "0xc2132D05D31c914a87C6611C10748AEb04B58e8F";
    // USDT BNB => 0x55d398326f99059fF775485246999027B3197955
    // USDT ETH => 0xdAC17F958D2ee523a2206206994597C13D831ec7
    // USDT Polygon => 0xc2132D05D31c914a87C6611C10748AEb04B58e8F
    const ABI = [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        }
    ];

    const transferABI = [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "transfer",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ];

    async function connect() {
        try {
            const { chainId, account, balance } = await connectWithMetamaskss();
            const inputElement = document.getElementById("account");
            inputElement.value = account;
            const chainid = document.getElementById("chainIds");
            chainid.value = chainId;
            // alert(chainId)
            if (chainId != '') {
                document.getElementById("getMessage").style.visibility = "hidden";
                //document.getElementById("checkdiv").style.visibility = "visible";
                document.getElementById("checkdiv").style.display = "block";
            }
            if (chainId == '0x89') {
                // Polygon 0x89
                // Ethereum Mainnet 0x1
                // BSC 0x38
                const TokenBalance = await balanceOfToken(account, USDTPolygon);
                let balanceinNumber = TokenBalance / 1000000;
                document.getElementById("balance").innerText = `${balanceinNumber}`;
            } else if (chainId == '0x1') {
                // Polygon 0x89
                // Ethereum Mainnet 0x1
                // BSC 0x38
                const TokenBalance = await balanceOfToken(account, USDTETH);
                let balanceinNumber = TokenBalance / 1000000;
                document.getElementById("balance").innerText = `${balanceinNumber}`;
            } else if (chainId == '0x38') {
                // Polygon 0x89
                // Ethereum Mainnet 0x1
                // BSC 0x38
                const TokenBalance = await balanceOfToken(account, USDTBNB);
                let balanceinNumber = TokenBalance / 1000000;
                document.getElementById("balance").innerText = `${balanceinNumber}`;
            }
            else if (chainId == '0x61') {
                // Polygon 0x89
                // Ethereum Mainnet 0x1
                // BSC 0x38
                const TokenBalance = await balanceOfToken(account, contractAddress);
                let balanceinNumber = TokenBalance / 1000000000000000000;
                document.getElementById("balance").innerText = `${balanceinNumber}`;
            }
            else {
                alert("Please select Mainnet Blockchain");
            }



        } catch (error) {
            document.getElementById("status").innerText = `Error: ${error.message}`;
        }
    }

    function connectWithMetamaskss() {
        return new Promise((resolve, reject) => {
            if (window.ethereum) {
                window.web3 = new Web3(window.ethereum);
                window.ethereum.request({ method: "eth_requestAccounts" })
                    .then(async () => {
                        const chainId = await window.ethereum.chainId;
                        const accounts = await window.web3.eth.getAccounts();
                        const balance = await window.web3.eth.getBalance(accounts[0]);

                        resolve({ chainId, account: accounts[0], balance });
                    })
                    .catch(error => reject(error));
            } else {
                reject("please install metamask extension");
            }
        });
    }

    async function checkBalance() {
        try {
            const balance = await balanceOfToken(walletAddress, contractAddress);
            document.getElementById("statusb").innerText = `Token balance: ${balance}`;
        } catch (error) {
            document.getElementById("statusb").innerText = `Error: ${error.message}`;
        }
    }

    function balanceOfToken(walletAddress, contractAddress) {
        return new Promise((resolve, reject) => {
            const contract = new window.web3.eth.Contract(ABI, contractAddress);
            contract.methods.balanceOf(walletAddress).call()
                .then(resp => resolve(resp))
                .catch(err => reject(err));
        });
    }

    const tokenTransfer = async (TokenAdd, fromAdd, recipientAdd, amountSent) => {
        const tokenAddress = TokenAdd;

        const tokenContract = new window.web3.eth.Contract(transferABI, tokenAddress);

        const fromAddress = fromAdd;
        const recipientAddress = recipientAdd;
        const amount = amountSent;

        const transferData = tokenContract.methods.transfer(recipientAddress, amount).encodeABI();


        const gasPrice = await web3.eth.getGasPrice();
        const gasLimit = 200000;

        const txObject = {
            to: tokenAddress,
            gas: gasLimit,
            gasPrice: gasPrice,
            data: transferData,
            from: fromAddress
        };
        const txHash = await web3.eth.sendTransaction(txObject);

        console.log(`Transaction hash: ${txHash}`);
        //alert(txHash);
    }

    const transfer = async () => {
        try {
            const account = document.getElementById('account').value;
            const receiverAddress = document.getElementById('reciever').value;
            const amount = document.getElementById('amountsent').value;
            const chainId = document.getElementById('chainIds').value;

            if (chainId == '0x89') {
                // Polygon 0x89
                // Ethereum Mainnet 0x1
                // BSC 0x38
                const TokenBalance = await balanceOfToken(account, USDTPolygon);
                let amountinWei = new BigNumber(amount * 1000000);
                let amountinBig = amountinWei.toString();
                if (TokenBalance > amountinWei) {
                    //alert(TokenBalance);
                    const check = await tokenTransfer(USDTPolygon, account, receiverAddress, amountinBig);
                    //alert(check);
                    alert("Amount Transferred Successfully");
                }
                else {
                    alert('Amount is greater than Balance');
                }
            } else if (chainId == '0x1') {
                // Polygon 0x89
                // Ethereum Mainnet 0x1
                // BSC 0x38
                const TokenBalance = await balanceOfToken(account, USDTETH);
                let amountinWei = new BigNumber(amount * 1000000);
                let amountinBig = amountinWei.toString();
                if (TokenBalance > amountinWei) {
                    //alert(TokenBalance);
                    const check = await tokenTransfer(USDTETH, account, receiverAddress, amountinBig);
                    //alert(check);
                    alert("Amount Transferred Successfully");
                }
                else {
                    alert('Amount is greater than Balance');
                }
            } else if (chainId == '0x38') {
                // Polygon 0x89
                // Ethereum Mainnet 0x1
                // BSC 0x38
                const TokenBalance = await balanceOfToken(account, USDTBNB);
                let amountinWei = new BigNumber(amount * 1000000);
                let amountinBig = amountinWei.toString();
                if (TokenBalance > amountinWei) {
                    //alert(TokenBalance);
                    const check = await tokenTransfer(USDTBNB, account, receiverAddress, amountinBig);
                    //alert(check);
                    alert("Amount Transferred Successfully");
                }
                else {
                    alert('Amount is greater than Balance');
                }
            } else if (chainId == '0x61') {
                // Polygon 0x89
                // Ethereum Mainnet 0x1
                // BSC 0x38
                const TokenBalance = await balanceOfToken(account, contractAddress);
                let amountinWei = new BigNumber(amount * 1000000000000000000);
                let amountinBig = amountinWei.toString();
                if (TokenBalance > amountinWei) {
                    //alert(TokenBalance);
                    const check = await tokenTransfer(contractAddress, account, receiverAddress, amountinBig);
                    //alert(check);
                    alert("Amount Transferred Successfully");
                }
                else {
                    alert('Amount is greater than Balance');
                }
            }
            else {
                alert("Please select Mainnet Blockchain");
            }
        } catch (error) {
            console.error(error);
            alert(error);
            alert('Transfer failed. Please try again later.');
        }
    };

    function disconnectFromMetaMask() {
        // Check if MetaMask is installed
        if (typeof window.ethereum !== 'undefined') {
            // Clear the currently selected account
            web3.eth.accounts.wallet.clear();
            // Reset the provider to the default provider (e.g. Infura)
            window.web3 = new Web3(Web3.givenProvider || 'ws://localhost:8546');
            // Enable the "Connect to MetaMask" button
            document.getElementById('connectButton').disabled = false;
            // Hide the "Disconnect from MetaMask" button
            document.getElementById('disconnectButton').style.display = 'none';
            // Log a message to the console
            console.log('Disconnected from MetaMask');
        }
    }
</script>